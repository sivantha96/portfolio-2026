[
  {
    "id": 1,
    "title": "E-commerce Platform",
    "description": "A full-stack e-commerce solution with React and Node.js",
    "fullDescription": "This e-commerce platform was built to provide a seamless shopping experience for users. It features a responsive design, user authentication, product catalog, shopping cart, and secure checkout process.\n\nThe frontend was developed using React and Next.js, providing a fast and interactive user interface. The backend uses Node.js with Express, connected to a MongoDB database for efficient data storage and retrieval.\n\nOne of the key challenges was implementing a real-time inventory management system to prevent overselling. This was achieved using WebSockets to update product availability across all active user sessions.",
    "images": [
      "https://picsum.photos/200/300",
      "https://picsum.photos/200/300",
      "https://picsum.photos/200/300"
    ],
    "codeSnippet": "// Real-time inventory update\nsocket.on('inventoryUpdate', (data) => {\n  const { productId, newQuantity } = data;\n  setProducts(prevProducts => \n    prevProducts.map(product => \n      product.id === productId \n        ? { ...product, quantity: newQuantity } \n        : product\n    )\n  );\n});"
  },
  {
    "id": 2,
    "title": "Task Management App",
    "description": "A collaborative task manager with real-time updates",
    "fullDescription": "This task management application was designed to streamline team collaboration and project organization. It allows users to create, assign, and track tasks in real-time, enhancing team productivity.\n\nThe app was built using a modern tech stack including React for the frontend, GraphQL for efficient data querying, and PostgreSQL for robust data storage. Real-time updates were implemented using GraphQL subscriptions.\n\nA major focus was placed on the user experience, with intuitive drag-and-drop interfaces for task management and a clean, responsive design that works seamlessly across desktop and mobile devices.",
    "images": [
      "https://picsum.photos/200/300",
      "https://picsum.photos/200/300",
      "https://picsum.photos/200/300"
    ],
    "codeSnippet": "// GraphQL subscription for real-time task updates\nconst TASK_UPDATED_SUBSCRIPTION = gql`\n  subscription OnTaskUpdated {\n    taskUpdated {\n      id\n      title\n      status\n      assignee {\n        id\n        name\n      }\n    }\n  }\n`;\n\nuseSubscription(TASK_UPDATED_SUBSCRIPTION, {\n  onSubscriptionData: ({ subscriptionData }) => {\n    const updatedTask = subscriptionData.data.taskUpdated;\n    updateTaskInState(updatedTask);\n  },\n});"
  },
  {
    "id": 3,
    "title": "AI-Powered Chatbot",
    "description": "An intelligent chatbot for customer support",
    "fullDescription": "This AI-powered chatbot was developed to provide 24/7 customer support for a large e-commerce platform. It uses natural language processing to understand customer queries and provide accurate, helpful responses.\n\nThe chatbot was built using Python for the backend, with TensorFlow for the natural language processing model. The frontend interface was created with React, providing a smooth and interactive chat experience.\n\nOne of the most challenging aspects was training the AI model to handle a wide variety of customer queries effectively. This was achieved through extensive training on historical customer support data and continuous learning from new interactions.",
    "images": [
      "https://picsum.photos/200/300",
      "https://picsum.photos/200/300",
      "https://picsum.photos/200/300"
    ],
    "codeSnippet": "# AI model for intent classification\ndef classify_intent(text):\n    # Preprocess the text\n    tokens = preprocess_text(text)\n    \n    # Convert tokens to model input format\n    model_input = tokenizer.texts_to_sequences([tokens])\n    model_input = pad_sequences(model_input, maxlen=MAX_SEQUENCE_LENGTH)\n    \n    # Predict intent\n    intent_probabilities = model.predict(model_input)[0]\n    predicted_intent = intents[np.argmax(intent_probabilities)]\n    \n    return predicted_intent"
  }
]
